<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>docker-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>docker-demo</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>

		<docker.image.prefix>huangran</docker.image.prefix>
		<!-- docker hub镜像仓库地址 -->
		<docker.repostory>huangran/hr</docker.repostory>
		<!-- 阿里云 docker镜像仓库地址 -->
		<!--<docker.repostory>registry.cn-beijing.aliyuncs.com/pers/hr</docker.repostory>-->

		<docker.image.prefix>hnister</docker.image.prefix>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>-->

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<scope>test</scope>
		</dependency>-->
	</dependencies>

	<build>
		<!--项目打包的名称-->
		<finalName>docker-demo</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.spotify</groupId>
				<!-- 这里使用新版dockerfile-maven-plugin插件 -->
				<artifactId>dockerfile-maven-plugin</artifactId>
				<version>1.4.10</version>
				<!--<version>1.3.7</version>-->
				<!--<version>1.4.0</version>-->
				<!--<configuration>
					&lt;!&ndash;<dockerhost></dockerhost>&ndash;&gt;
					&lt;!&ndash; Dockerfile目录指定 &ndash;&gt;
					<dockerfile>src/main/docker/Dockerfile</dockerfile>
					&lt;!&ndash;<repository>${docker.repository.url}/${docker.repository.namespace}/${project.artifactId}</repository>&ndash;&gt;
					<repository>http://192.168.205.129:2375/${project.artifactId}</repository>
					&lt;!&ndash;<repository>F:/docker/images/${project.artifactId}</repository>&ndash;&gt;
					&lt;!&ndash; 生成镜像标签 如不指定 默认为latest &ndash;&gt;
					<tag>${project.version}</tag>
					<buildArgs>
						&lt;!&ndash; 理论上这里定义的参数可以传递到Dockerfile文件中&ndash;&gt;
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
				</configuration>-->
				<configuration>
					<dockerfile>src/main/docker/Dockerfile</dockerfile>
					<repository>${docker.repostory}/${project.artifactId}</repository>
					<buildArgs>
						<JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
					</buildArgs>
				</configuration>

			</plugin>
		</plugins>
	</build>

</project>
